#! /usr/bin/python

# ***********************************************************************
# Copyright (c) 2017 Unity Technologies. All rights reserved.
#
# Licensed under the ##LICENSENAME##.
# See LICENSE.md file in the project root for full license information.
# ***********************************************************************

import sys
import re

# Input:
# 1- the output .i file
# 2- the file that is the result of swig -debug-typedef
# Output:
# - a swig .i file to be %included at the start of the fbxsdk.i file

# This should normally be integrated as part of the build system.
output_filename = sys.argv[1]
typedefs_filename = sys.argv[2]

rootclass = "FbxObject"

# For each derived class, a list of classes it inherits from. If a class isn't
# in this dict it's not a derived class (it inherits from nothing).
baseclasses = dict()

def fix_classname(clsname):
    """
    Template arguments get wrapped in parens for some reason.
    """
    return re.sub(r'<\(', '<', re.sub(r'\)>', '>', clsname))

with open(typedefs_filename) as typedef_file:
    current_scope = None
    bases = []
    def store():
        if current_scope and bases:
            baseclasses[current_scope] = bases
    for line in typedef_file:
        m = re.search("Type scope '(.*)'", line)
        if m:
            # changing scope; store the old one, clear the accumulating list
            store()
            current_scope = fix_classname(m.group(1))
            bases = []
        m = re.search("Inherits from '(.*)'", line)
        if m:
            bases.append(fix_classname(m.group(1)))
    # end of file; remember the last block we read
    if current_scope and bases:
        store()

# Find all the classes that derive from FbxObject.
handleclasses = set()

handleclasses.add(rootclass)
for cls in baseclasses:
    # squash a warning about %extend, which happens when you
    # declare a typedef to a root class
    if cls.endswith('::ParentClass'): continue
    if rootclass in baseclasses[cls]:
        handleclasses.add(cls)

leafclasses = set()
allbases = []
# for klass in handleclasses:
# import pprint as pp
for klass in handleclasses:
    allbases += baseclasses[klass]
allbases = set(allbases)
for klass in handleclasses:
    if klass not in allbases:
        leafclasses.add(klass)
nonleafclasses = handleclasses - leafclasses



statement_start = """
private static System.Collections.Generic.Dictionary<System.IntPtr, int> ptrToIndexDict = new System.Collections.Generic.Dictionary<System.IntPtr, int>();
public static FbxObject Realtype (System.IntPtr cPtr, bool ignored)
{
    if (cPtr == System.IntPtr.Zero)
    {
        return null;
    }

    System.IntPtr p = NativeMethods.FbxObject_GetRuntimeClassId(new System.Runtime.InteropServices.HandleRef(null, cPtr));
    string name = NativeMethods.FbxClassId_GetName(new System.Runtime.InteropServices.HandleRef(null, p));
    // This switch statement is auto-generated by a script
    switch (name)
    {"""

statement_body_template = """
        case "{}":
            return new {}(cPtr, ignored);"""

statement_end = """
        default:
            break;
    }
    // we failed to get a match, return a bland FbxObject.
    return new FbxObject(cPtr, ignored);
}
"""

typemap_template = """
%typemap(csout, excode=SWIGEXCODE) {} {{
  System.IntPtr cPtr = $imcall;
  $csclassname ret = ($csclassname) NativeMethods.Realtype(cPtr, $owner);$excode;
  return ret;
}}
"""

body_statements = [statement_body_template.format(klass, klass) for klass in handleclasses]
constructor_func = statement_start + ''.join(body_statements) + statement_end

# write out the code
with open(output_filename, 'w') as outfile:
    outfile.write("/*This code has been generated by the generate-downcast-table.py build script*/\n")
    outfile.write("%pragma(csharp) imclasscode=%{\n")
    outfile.write(constructor_func)
    outfile.write("%}\n")
    # the last type in the list also needs the pointer type qualifier
    typemap_list = "*, \n".join(nonleafclasses) + '*'
    outfile.write(typemap_template.format(typemap_list))

print("Generated downcast table for {} classes.".format(len(handleclasses)))